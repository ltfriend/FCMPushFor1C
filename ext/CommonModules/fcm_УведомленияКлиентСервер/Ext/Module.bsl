///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2021
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет отправку push-уведомления через Firebase Cloud Messaging. Если при отправке уведомления произошла ошибка,
// то будет вызвано Исключение.
//
// Параметры:
//  Уведомление - Структура - структура, описывающая push-уведомление. Подробнее см. описание функции СоздатьУведомление.
//  ПроектFirebase - Строка - идентификатор проекта сервиса  Firebase.
//  КлючДоступа - Строка - ключ доступа к сервису Firebase Cloud Messaging.
// 
// Возвращаемое значение:
//  Строка - идентификатор Firebase Cloud Messaging отправленного уведомления.
//
Функция ОтправитьУведомление(Уведомление, ПроектFirebase, КлючДоступа) Экспорт
	
	АдресРесурса = СтрШаблон(ШаблонАдресаРесурсаОтправкиУведомления(), ПроектFirebase);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", "Bearer " + КлючДоступа);
	Заголовки.Вставить("Content-Type", "application/json");
	
	ТелоЗапроса = УведомлениеВJSON(Уведомление);
	
	Запрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Соединение = Новый HTTPСоединение(АдресСервераFCM(), , , , , , Новый ЗащищенноеСоединениеOpenSSL);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
	
	Если Не ПустаяСтрока(ТелоОтвета) Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
	Иначе
		
		СтруктураОтвета = Неопределено;
		
	КонецЕсли; 
	
	Если Ответ.КодСостояния <> 200 Тогда
		
		ОписаниеОшибки = "";
		
		Если СтруктураОтвета <> Неопределено
				И СтруктураОтвета["error"] <> Неопределено
				И СтруктураОтвета["error"]["message"] <> Неопределено Тогда
			
			ОписаниеОшибки = СтруктураОтвета["error"]["message"];
			
		КонецЕсли; 
		
		ТекстСообщения = НСтр("ru='Ошибка при отправке push-уведомления'");
		ТекстСообщения = ТекстСообщения + ?(Не ПустаяСтрока(ОписаниеОшибки),
			": " + ОписаниеОшибки,
			НСтр("ru='. Код состояния: '") + Ответ.КодСостояния + "."
		);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 
	
	Возврат СтруктураОтвета["name"];
	
КонецФункции 

// Возвращает структуру, описывающую push-уведомление и инициализированную пустыми значениями.
// Описание параметров см. https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages
//
// Возвращаемое значение:
//  Структура
//
Функция СоздатьУведомление() Экспорт
	
	Уведомление = Новый Структура;
	Уведомление.Вставить("token", "");
	Уведомление.Вставить("topic", "");
	Уведомление.Вставить("condition", "");
	Уведомление.Вставить("data", Новый Соответствие);
	Уведомление.Вставить("notification", Неопределено);
	Уведомление.Вставить("android", Неопределено);
	Уведомление.Вставить("webpush", Неопределено);
	Уведомление.Вставить("apns", Неопределено);
	
	Возврат Уведомление;
	
КонецФункции 

// Возвращает структуру, описывающую оповещение (Notification) и инициализированную пустыми значениями.
// Описание параметров см. https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#Notification
//
// Возвращаемое значение:
//  Структура
//
Функция СоздатьОповещение() Экспорт
	
	Оповещение = Новый Структура;
	Оповещение.Вставить("title", "");
	Оповещение.Вставить("body", "");
	Оповещение.Вставить("image", "");
	
	Возврат Оповещение;
	
КонецФункции 

// Возвращает структуру, описывающую конфигурацию push-уведомление для Android и инициализированную пустыми значениями.
// Описание параметров см. https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#AndroidConfig
//
// Возвращаемое значение:
//  Структура
//
Функция СоздатьКонфигурациюAndroid() Экспорт
	
	Конфигурация = Новый Структура;
	Конфигурация.Вставить("collapse_key", "");
	Конфигурация.Вставить("priority", "");
	Конфигурация.Вставить("ttl", "");
	Конфигурация.Вставить("restricted_package_name", "");
	Конфигурация.Вставить("data", Новый Соответствие);
	Конфигурация.Вставить("notification", Неопределено);
	
КонецФункции 

// Возвращает структуру, описывающую оповещение для Android (AndroidNotification) и инициализированную пустыми
// значениями.
// Описание параметров см. https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#AndroidNotification
//
// Возвращаемое значение:
//  Структура
//
Функция СоздатьОповещениеAndroid() Экспорт
	
	Оповещение = Новый Структура;
	Оповещение.Вставить("title", "");
	Оповещение.Вставить("body", "");
	Оповещение.Вставить("icon", "");
	Оповещение.Вставить("color", "");
	Оповещение.Вставить("sound", "");
	Оповещение.Вставить("tag", "");
	Оповещение.Вставить("click_action", "");
	Оповещение.Вставить("body_loc_key", "");
	Оповещение.Вставить("body_loc_args", Новый Массив);
	Оповещение.Вставить("title_loc_key", "");
	Оповещение.Вставить("title_loc_args", Новый Массив);
	Оповещение.Вставить("channel_id", "");
	Оповещение.Вставить("ticker", "");
	Оповещение.Вставить("sticky", "");
	Оповещение.Вставить("event_time", "");
	Оповещение.Вставить("local_only", "");
	Оповещение.Вставить("notification_priority", "");
	Оповещение.Вставить("default_sound", "");
	Оповещение.Вставить("default_vibrate_timings", "");
	Оповещение.Вставить("default_light_settings", "");
	Оповещение.Вставить("vibrate_timings", Новый Массив);
	Оповещение.Вставить("visibility", "");
	Оповещение.Вставить("notification_count", "");
	Оповещение.Вставить("light_settings", Неопределено);
	Оповещение.Вставить("image", "");
	
	Возврат Оповещение;
	
КонецФункции 

// Возвращает структуру, описывающую конфигурацию push-уведомление для Webpush protocol и инициализированную пустыми
// значениями.
// Описание параметров см. https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#WebpushConfig
//
// Возвращаемое значение:
//  Структура
//
Функция СоздатьКонфигурациюWebPush() Экспорт
	
	Конфигурация = Новый Структура;
	Конфигурация.Вставить("headers", Новый Соответствие);
	Конфигурация.Вставить("data", Новый Соответствие);
	Конфигурация.Вставить("notification", Неопределено);
	
	Возврат Конфигурация;
	
КонецФункции 

// Возвращает структуру, описывающую конфигурацию push-уведомление для Apple Push Notification Service и
// инициализированную пустыми значениями.
// Описание параметров см. https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#ApnsConfig
//
// Возвращаемое значение:
//  Структура
//
Функция СоздатьКонфигурациюAPNS() Экспорт
	
	Конфигурация = Новый Структура;
	Конфигурация.Вставить("headers", Новый Соответствие);
	Конфигурация.Вставить("payload", Неопределено);
	
	Возврат Конфигурация;
	
КонецФункции 

// Возвращает структуру, описывающую настройки светового оповещения (LightSettings) и инициализированную пустыми значениями.
// Описание параметров см. https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#LightSettings
//
// Возвращаемое значение:
//  Структура
//
Функция НастройкиСветовогоОповещения() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("color", Неопределено);
	Настройки.Вставить("light_on_duration", "");
	Настройки.Вставить("light_off_duration", "");
	
	Возврат Настройки;
	
КонецФункции 

// Возвращает структуру, описывающую цвет RGBA.
//
// Параметры:
//  R - Число - красный (red), дробное число от 0 до 1;
//  G - Число - зеленый (green), дробное число от 0 до 1;
//  B - Число - синий (blue), дробное число от 0 до 1;
//  A - Число - значение альфа-канала, определяющее прозрачность (alpha), дробное число от 0 до 1.
// 
// Возвращаемое значение:
//  Структура - структура, описывающая цвет RGBA.
//
Функция ЦветRGBA(R, G, B, A) Экспорт
	
	ЦветRGBA = Новый Структура;
	ЦветRGBA.Вставить("red", R);
	ЦветRGBA.Вставить("green", G);
	ЦветRGBA.Вставить("blue", B);
	ЦветRGBA.Вставить("alpha", A);
	
	Возврат ЦветRGBA;
	
КонецФункции 

#Область ПредопределенныеЗначения

Функция РазрешениеFCMОтправкаУведомлений() Экспорт	Возврат "https://www.googleapis.com/auth/firebase.messaging"; КонецФункции 

Функция ПриоритетAndroidНормальный() Экспорт		Возврат "NORMAL";					КонецФункции 
Функция ПриоритетAndroidВысокий() Экспорт			Возврат "HIGH";						КонецФункции

Функция ПриоритетОповещенияНеУказан() Экспорт		Возврат "PRIORITY_UNSPECIFIED";		КонецФункции 
Функция ПриоритетОповещенияМинимальный() Экспорт 	Возврат "PRIORITY_MIN";				КонецФункции 
Функция ПриоритетОповещенияНизкий() Экспорт			Возврат "PRIORITY_LOW";				КонецФункции 
Функция ПриоритетОповещенияПоУмолчанию() Экспорт	Возврат "PRIORITY_DEFAULT";			КонецФункции 
Функция ПриоритетОповещенияВысокий() Экспорт		Возврат "PRIORITY_HIGH";			КонецФункции 
Функция ПриоритетОповещенияМаксимальный() Экспорт 	Возврат "PRIORITY_MAX";				КонецФункции 

Функция ВидимостьУведомленияНеУказана() Экспорт		Возврат "VISIBILITY_UNSPECIFIED";	КонецФункции 
Функция ВидимостьУведомленияПриватное() Экспорт		Возврат "PRIVATE";					КонецФункции 
Функция ВидимостьУведомленияПубличное() Экспорт		Возврат "PUBLIC";					КонецФункции 
Функция ВидимостьУведомленияСекретное() Экспорт		Возврат "SECRET";					КонецФункции 

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Выполняет преобразование структуры, описывающей push-уведомление, в строку JSON для отправки на сервере.
//
// Параметры:
//  Уведомление - Структура - структура, описывающая push-уведомление. Подробнее см. описание функции СоздатьУведомление.
// 
// Возвращаемое значение:
//  Строка - строка в формате JSON, содержащая данные push-уведомления для отправки на сервер.
//
Функция УведомлениеВJSON(Уведомление)
	
	Сообщение = Новый Структура("message", Уведомление);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьОбъектВJSON(ЗаписьJSON, Сообщение);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции 

Процедура ЗаписатьОбъектВJSON(ЗаписьJSON, Объект)
	
	// Используется самостоятельный обход и запись значений вместо "ЗаписатьJSON" для пропуска незаполненных значений.
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Массив") Тогда
		
		Если Объект.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Для каждого ЭлементМассива Из Объект Цикл
			ЗаписатьОбъектВJSON(ЗаписьJSON, ЭлементМассива);
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьКонецМассива();
		
	ИначеЕсли ТипОбъекта = Тип("Структура") Или ТипОбъекта = Тип("Соответствие") Тогда
		
		Если Объект.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		НачалоОбъектаЗаписано = Ложь;
		
		Для каждого КлючЗначение Из Объект Цикл
			
			Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Не НачалоОбъектаЗаписано Тогда
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				НачалоОбъектаЗаписано = Истина;
			КонецЕсли; 
			
			ЗаписьJSON.ЗаписатьИмяСвойства(КлючЗначение.Ключ);
			ЗаписатьОбъектВJSON(ЗаписьJSON, КлючЗначение.Значение);
			
		КонецЦикла;
		
		Если НачалоОбъектаЗаписано Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипОбъекта = Тип("Строка")
				Или ТипОбъекта = Тип("Число")
				Или ТипОбъекта = Тип("Булево") Тогда
			
			ЗаписьJSON.ЗаписатьЗначение(Объект);
			
		Иначе
			
			ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект));
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры 

Функция АдресСервераFCM()
	Возврат "fcm.googleapis.com";
КонецФункции 

Функция ШаблонАдресаРесурсаОтправкиУведомления()
	Возврат "/v1/projects/%1/messages:send";
КонецФункции 

#КонецОбласти 
